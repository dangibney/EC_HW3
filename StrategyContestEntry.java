import java.util.Random;

/**
 * Created by DG on 3/21/2016.
 * Plays a mixed strategy. History indexes into a strategy array(found by GA).
 * This value gives the probablity of cooperating.
 */
public class StrategyContestEntry extends Strategy{

    int currentIteration = 0;
    int[] history = new int[8];
    // found by GA
    double[] strategy = {0.2607674627896065, 0.0, 0.684029664759256, 0.5208498292937533, 0.5076465525036924, 0.6419545269104837, 0.046026560157168314, 1.0, 0.7380538231608118, 0.33196628841645903, 0.7994218550966775, 0.9178469825012112, 0.3112295007273578, 0.9972708463111696, 0.867289596842723, 0.2955796350185207, 0.0, 0.34675390372274606, 0.8147415372564237, 0.19933842729517498, 0.8528949955395525, 0.44837127300129537, 0.7934418014454747, 0.7238266574082257, 0.6772720888741902, 0.8408140247683361, 0.29345468754502196, 0.8244258225818744, 0.320641749892317, 0.8513165996921418, 0.0951736317444601, 0.6281326653967526, 0.9915761460666308, 1.0, 0.6762883875185954, 0.8215855401958461, 0.2130238023498735, 0.8436433369130295, 0.21924353142043146, 0.2854718954675284, 0.2553923429342244, 0.1894946478114199, 0.18772244650320866, 0.48514219832132177, 0.2066566585111569, 0.14941837335016633, 0.4336613107004058, 0.16248992750444505, 0.3643668433956403, 0.19024446603941148, 0.8887648243301164, 0.8221104286510967, 0.33489872969915024, 0.07788882037097497, 0.368662320251297, 0.4790305680172995, 0.7407717643821098, 0.5977602255839012, 0.41478260230109004, 0.4913587808477996, 0.6841575598814108, 0.05894801833501716, 0.7808236663328161, 0.9148325598485253, 0.9560114160416837, 0.15324184981790007, 0.4340737604592263, 0.7869808279753304, 0.5469449683853606, 0.0, 0.6766964517131201, 0.8789514093393719, 0.09767088661158835, 0.7322679111255386, 1.0, 0.2966800624735696, 0.5758347325531458, 0.9181033648440962, 0.3385885435289494, 0.8809890802092223, 0.18928089095626766, 0.35304715551721183, 0.3812666801978715, 0.8498627398235481, 0.5934496172955661, 0.40266489748915124, 0.0, 0.17167159062711906, 0.2806695994969106, 0.3726243306701292, 0.6803944227202519, 0.5826270305777085, 0.49643531049748724, 0.8300646522222267, 0.9163066749341823, 0.548383913316565, 0.007458213563044918, 0.6917063411447808, 0.936104620336752, 0.7485829582251977, 0.7452481692778314, 0.4933190063744349, 0.6354745853908053, 0.9427481266164466, 0.5984675144936917, 0.056604079001804364, 0.40377552353502677, 0.5975603752221368, 0.30003007385836167, 0.0, 0.23997192516269084, 0.6237098301433222, 0.0, 0.0, 0.8032658475258061, 0.5326403034988487, 0.8552295093811468, 0.690119142690906, 0.1083203669881542, 0.9394890339439601, 0.9207431803698038, 0.6529397890111287, 0.5088200658948473, 0.5608204136196644, 0.0, 0.9879118995897475, 0.8980297093412114, 0.37499660947824287, 0.7476892555843496, 0.8362981180086736, 0.13850711228628396, 0.11100300230550367, 0.5734623492873618, 0.1769630058434133, 0.7779186024931031, 0.49544965960504495, 0.834617702691053, 1.0, 0.8996062737660807, 0.6739385803035131, 0.4113158790186132, 0.22869080953994547, 1.0, 0.7982362575897539, 0.533929968709689, 0.5212102564189601, 0.6102957258222527, 0.2944605262354897, 0.0, 0.403220952282349, 0.12682873457407007, 0.16646074756945994, 0.0, 0.709546965928892, 0.2770169444134401, 0.2891210994465005, 0.4272998789196599, 0.32606807501387275, 0.5871221490563852, 0.0, 0.9054584853577007, 0.771876438765726, 0.9704312699903196, 0.7947944420701465, 0.6186454369466794, 1.0, 0.7051612963509246, 0.12791018885094724, 1.0, 1.0, 0.4338825348615002, 0.7298080230080095, 0.5843071489707792, 0.2607281676715366, 0.5077630062685741, 0.6180068344354847, 1.0, 0.8805898756576662, 0.5825058871589563, 0.30480351001045647, 0.11372704305250192, 1.0, 0.5034738428479367, 0.916411307463512, 0.8826048026053502, 1.0, 0.032690849052661494, 0.2890824433216323, 0.7975951816567418, 0.336547460595203, 0.7781895818846762, 0.07803016312374156, 0.37115213861918833, 0.5667298148022677, 0.009666253683338469, 1.0, 0.0, 0.1413310892278623, 0.5453575119703395, 0.6355574768333099, 0.0, 0.3547988233485205, 0.38261009556893544, 0.8821372307508859, 0.31403812331698083, 0.1850261890232202, 0.5485159102099563, 0.8385750927996793, 0.6031047137963833, 0.7104183139587972, 0.0, 0.19602541268323204, 1.0, 0.964711361782876, 0.06518050757598337, 0.6406230251894984, 0.4359492788421558, 0.17564069890254075, 0.0, 0.5683557614581469, 0.26574924223165514, 0.10465164471412497, 0.7951878546919944, 0.47955663976809326, 0.5477875972413917, 0.8085184592884909, 0.274266208177879, 0.021972646654295006, 0.6656880266115626, 0.821306124030177, 0.039926512754576364, 0.9166025587158382, 0.895879523258416, 0.9712141587788087, 0.9768550843662913, 0.3235503399427744, 0.020771545300015522, 0.3914146061365655, 0.02463016080106595, 0.2296420804360467, 0.8971437588013538, 0.43610466723886165, 0.9813591628280967, 0.8776452001867158, 0.20875715076176088, 0.572618526941516, 0.17174223856222975, 0.2171237696321016, 0.6046280837095306, 0.05711478114682657, 0.0, 0.5749087078570457, 0.5541729738977977, 0.4602553726416081, 0.466206938450353, 0.9561688171609531
        };

    public StrategyContestEntry() {
        name = "Mixed Strategy";
    }

    public int nextMove(){

        // play tit for tat if we don't have enough history
        if(currentIteration*2 < history.length){

            currentIteration++;
            return opponentLastMove;

        } else {
            // get strategy index from current history of game
            int index = getIndex();

            // draw random double
            Random rand = new Random();
            double randomDraw = rand.nextDouble();

            // if lower or equal to cooperation strategy probability, then cooperate
            int move = (randomDraw <= strategy[index]) ? 1 : 0;

            //System.out.println("randomDraw: " + randomDraw + " Pr: " + strategy[index]);
            currentIteration++;
            return move;
        }
    }

    /*
   Converts history array to a number.
   Works as follows, from the starting index, the values are read from left to right
   and put into a binary number from right to left. Wrap around as needed. For example

   startIdx = 4,
                          |<- start here
   history = [0, 1, 0, 0, 1, 1]  becomes in binary 001011
   which is 11 in base 10
    */
    private int getIndex(){
        int index = 0;
        int startIdx = (currentIteration*2  % history.length);
        //System.out.println("History start idx: "+ startIdx);
        for(int i = 0; i < history.length; i++){
            index += history[(i + startIdx) % history.length] * (int)Math.pow(2,i);
        }
        return index;
    }

    @Override
    public void saveOpponentMove(int move)  {
        opponentLastMove = move;
        // this goofy indexing(the "- 1") is because the currentIteration is incremented immediately after move
        // but before move gets saved
        history[(currentIteration*2 - 1) % history.length] = move;
    }

    @Override
    public void saveMyMove(int move)  {
        myLastMove = move;
        // this goofy indexing(the " - 2") is because the currentIteration is incremented immediately after move
        // but before move gets saved
        history[(currentIteration*2 - 2) % history.length] = move;
    }

}
